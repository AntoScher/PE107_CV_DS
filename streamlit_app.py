import os
import re
import streamlit as st
from deepseek_api import DeepSeekAPI, DeepSeekAPIError
from parse_hh import get_html, extract_vacancy_data, extract_resume_data, ParseError
from urllib.parse import urlparse

# Constants
SYSTEM_PROMPT = """
–ü—Ä–æ—Å–∫–æ—Ä—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.

–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ—è—Å–Ω—è—Ç—å –æ—Ü–µ–Ω–∫—É.
–û—Ç–¥–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∑—é–º–µ (–ø–æ–Ω—è—Ç–Ω–æ –ª–∏, —Å –∫–∞–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç –∏ –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∏—Ö —Ä–µ—à–∞–ª?).
–≠—Ç–∞ –æ—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ - –Ω–∞–º –≤–∞–∂–Ω–æ –Ω–∞–Ω–∏–º–∞—Ç—å —Ç–∞–∫–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.
–ü–æ—Ç–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç 1 –¥–æ 10.
""".strip()

# Configuration
CONFIG = {
    'required_fields': ['job_url', 'cv_url'],
    'max_retries': 3,
    'request_timeout': 30
}

# Initialize session state
if 'api_initialized' not in st.session_state:
    st.session_state.api_initialized = False

def validate_url(url: str, domain: str = 'hh.ru') -> bool:
    """Validate if URL is from the specified domain."""
    if not url:
        return False
    try:
        result = urlparse(url)
        return all([result.scheme in ['http', 'https'], 
                   result.netloc.endswith(domain)])
    except ValueError:
        return False

def initialize_api():
    """Initialize the DeepSeek API client."""
    try:
        api_key = st.secrets.get("DEEPSEEK_API_KEY")
        if not api_key:
            st.error("‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à DeepSeek API –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ .streamlit/secrets.toml")
            st.code("""[DEEPSEEK_API_KEY] = "–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å""", language='toml')
            st.stop()
        
        client = DeepSeekAPI(api_key=api_key)
        st.session_state.client = client
        st.session_state.api_initialized = True
        return client
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API: {str(e)}")
        st.stop()

def request_deepseek(system_prompt: str, user_prompt: str) -> str:
    """Send a request to the DeepSeek API with error handling and retries."""
    if not st.session_state.api_initialized:
        client = initialize_api()
    else:
        client = st.session_state.client
    
    try:
        response = client.chat(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            max_tokens=1000,
            temperature=0,
        )
        
        # Debug: Print the full response structure
        print("API Response:", response)  # This will be visible in the terminal
        
        # Handle different response formats
        if isinstance(response, dict):
            if 'choices' in response and len(response['choices']) > 0:
                return response['choices'][0].get('message', {}).get('content', 'No content')
            elif 'text' in response:
                return response['text']
            else:
                return str(response)  # Fallback to string representation
        
        # If response is not a dictionary, try to get its string representation
        return str(response)
        
    except DeepSeekAPIError as e:
        st.error(f"–û—à–∏–±–∫–∞ API DeepSeek: {str(e)}")
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API –∫–ª—é—á –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        st.exception(e)  # This will show the full traceback in the terminal
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."

def main():
    """Main application function."""
    st.title('üìä –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏')
    st.markdown("---")
    
    # Initialize API
    if not st.session_state.api_initialized:
        initialize_api()
    
    # Input fields
    job_url = st.text_input('üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é (hh.ru)', 
                          placeholder='https://hh.ru/vacancy/...')
    cv_url = st.text_input('üìÑ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ (hh.ru)',
                         placeholder='https://hh.ru/resume/...')
    
    # Validate URLs
    if not validate_url(job_url) and job_url:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —Å hh.ru")
    if not validate_url(cv_url) and cv_url:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ —Å hh.ru")
    
    if st.button("üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", 
                disabled=not (job_url and cv_url),
                help="–£–∫–∞–∂–∏—Ç–µ –æ–±–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"):
        
        with st.spinner("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ..."):
            try:
                # Get and parse HTML
                job_html = get_html(job_url).text
                resume_html = get_html(cv_url).text
                
                # Extract data
                job_text = extract_vacancy_data(job_html)
                resume_text = extract_resume_data(resume_html)
                
                # Prepare and send prompt
                prompt = f"# –í–ê–ö–ê–ù–°–ò–Ø\n{job_text}\n\n# –†–ï–ó–Æ–ú–ï\n{resume_text}"
                
                with st.expander("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", expanded=False):
                    st.markdown("### –î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
                    st.text(job_text[:1000] + (job_text[1000:] and '...'))
                    st.markdown("### –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ")
                    st.text(resume_text[:1000] + (resume_text[1000:] and '...'))
                
                response = request_deepseek(SYSTEM_PROMPT, prompt)
                
                if response:
                    st.markdown("---")
                    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
                    st.markdown(response)
                
            except ParseError as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
            except requests.exceptions.RequestException as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                st.exception(e)

if __name__ == "__main__":
    main()
